Ter uma lista dos volumes da geometria. Em particular das Arapucas. Isso pode ser feito passando o DetectorConstruction para o stepping action. Por exemplo, via constructor.

"SteppingAction::SteppingAction(RunAction* run, DetectorConstruction* det)"

Neste mesmo construtor você pode criar uma lista dos volumes contidos na geometria. Para isso precisará primeiro colocar nos includes do teu arquivo:

#include "G4PhysicalVolumeStore.hh"

Já na implementação do construtor é onde você pode acessar os nomes dos volumes. No entanto, tem alguns poréns.

1- Existem vários arquivos com nome repetido. Então precisa retirar as repetições.

2- Se não me engano o nome do volume "mundo" aparece no final da implementação do gdml.

No nosso caso você pode primeiro colocar os nomes dos volumes em um vetor. Talvez esse trecho abaixo funcione. Note que o std::vector<std::string> vname e a std::string wname devem ser definidos no .hh correspondente do stepping action.

  std::string avname="";
  G4PhysicalVolumeStore* pvols = G4PhysicalVolumeStore::GetInstance();
  for(int i=0; i<(int)pvols->size(); i++){
      avname = ((*pvols)[i])->GetName();
      if(!(std::find(vname.begin(),vname.end(),avname) != vname.end())){
	vname.push_back(avname);
      }
  }

  wname = vname.back();


Após fazer essa implementação no seu construtor você deve criar uma função que associa os nomes dos volumes a inteiros na sua classe. Por exemplo:

  std::pair<int,int> SteppingAction::VolumeCode(std::string name){
   if(name=="OutOfWorld"){std::pair<int,int> aux(-1,-1); return aux;}
   if(name==wname.c_str()){std::pair<int,int> aux(0,-1); return aux;}
   for(int i=1; i<(int)vname.size(); i++){
    if(name==vname[i]){
      std::pair<int,int> aux(i,0); return aux;
    }
  }

  std::pair<int, int> aux(-3,-4);
  return aux;
  
}


Com isto implementado deverá fazer na sua função UserSteppingAction o seguinte:


    if(aStep->GetTrack()->GetNextVolume()!=0){
      
      std::pair<int,int> aux = VolumeCode( aStep->GetTrack()->GetNextVolume()->GetName());
      G4int hv_id = man->GetH1Id("hv"); // get histogram int identifier, searched by histogram name
      man->FillH1(hv_id,aux.first); // fill histogram with volume code values

    }else{
      std::pair<int,int> aux = VolumeCode("OutOfWorld");
      G4int hv_id = man->GetH1Id("hv");
      man->FillH1(hv_id,aux.first);
    }



Veja que o histograma de "hv" você deve criar no RunAction e no caso aqui o "man" é o analysis manager que estou usando e que você deve adaptar para o seu código.